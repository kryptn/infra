on:
  repository_dispatch:
    types: [newreleases-test]

jobs:

  do-update:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: "main"

      - name: View context attributes
        id: meta
        uses: actions/github-script@v5
        with:
          script: |
            console.log(context)
            const projects = require("./.github/workflows/newreleases.json")
            console.log(projects)

            const valid = projects[context.payload.client_payload.project] != undefined
            core.setOutput('valid', valid)

            if (valid) {
              core.setOutput('app_dir', projects[context.payload.client_payload.project].app_dir)
              core.setOutput('branch_name', projects[context.payload.client_payload.project].branch_name)
              core.setOutput('version', context.payload.client_payload.version)
            }

      - run: |
          echo "valid: ${{ steps.meta.outputs.valid }}"
          echo "app dir: ${{ steps.meta.outputs.app_dir }}"
          echo "branch_name: ${{ steps.meta.outputs.branch_name }}"
          echo "version: ${{ steps.meta.outputs.version }}"


      - name: setup-kustomize
        uses: imranismail/setup-kustomize@v1

      - name: setup-helm
        uses: azure/setup-helm@v1

      - name: setup-just
        uses: extractions/setup-just@v1

      - name: Prepare Git
        env:
          BRANCH: ${{ steps.meta.outputs.branch_name }}
        run: |
          git config --global user.name "kryptn"
          git config --global user.email "kryptn@users.noreply.github.com"
          git fetch origin

          # switch if exists, else create new from main
          git switch $BRANCH || git switch -c $BRANCH
          git --no-pager log  --oneline -n 5

      - name: Just update
        run: |
          just ${{ steps.meta.outputs.app_dir }} update ${{ steps.meta.outputs.version }}

      - name: Commit and Push Update
        env:
          BRANCH: ${{ steps.meta.outputs.branch_name }}
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          git rev-parse --abbrev-ref HEAD
          git --no-pager log  --oneline -n 5

          git add .
          git status
          git commit -m "automated bump to version $VERSION"
          git push origin $BRANCH

      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          pr_title: "Updating ${{ github.event.client_payload.project }}"
          source_branch: ${{ steps.meta.outputs.branch_name }}
          destination_branch: "main"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/github-script@v5
        env:
          BRANCH: ${{ steps.meta.outputs.branch_name }}

        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            var body = []
            const release = context.payload.client_payload


            if (release.note?.title != undefined) {
              body.push(`## ${note.title}`)
            }

            if (release.note?.message != undefined) {
              body.push(note.message)
            }

            if (release.cve != undefined) {
              body.push(release.cve)
            }

            body.push(`[release ${release.version}](https://github.com/${PROJECT}/releases/tag/${release.version})`)

            const { data } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `$BRANCH`})

            console.log(data)

            github.rest.issues.createComment({
              issue_number: data[0].number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body.join("\n\n")
            })